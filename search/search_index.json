{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Workshop for LLM agents</p>"},{"location":"agents/","title":"Agents","text":""},{"location":"agents/#overview","title":"Overview","text":""},{"location":"agents/#architecture","title":"Architecture","text":""},{"location":"agents/#how-to-run","title":"How to run","text":""},{"location":"agents/#local","title":"Local","text":"<p>Before running codes, you need to install the dependencies.</p> <pre><code>$ poetry install\n</code></pre> <p>To see some components are properly working, you can see the available commands as below.</p> <pre><code>$ poetry run python main.py --help\n</code></pre> <p>To run the Streamlit app, you can run the following commands.</p> <pre><code>$ poetry run streamlit run main.py streamlit-app\n</code></pre>"},{"location":"agents/#docker","title":"Docker","text":"<pre><code># see the available commands\n$ docker run --rm \\\n    -v ${PWD}/.env:/app/.env \\\n    ks6088ts/workshop-llm-agents:latest \\\n    python main.py --help\n\n# mount the .env file to the container and expose the port 8501\n$ docker run --rm \\\n    -v ${PWD}/.env:/app/.env \\\n    -p 8501:8501 \\\n    ks6088ts/workshop-llm-agents:latest\n</code></pre>"},{"location":"agents/#use-cases","title":"Use cases","text":""},{"location":"agents/#chatbot-with-tools","title":"Chatbot with Tools","text":"<p>Graph:</p> <p></p> <p>Screenshot:</p> <p></p>"},{"location":"agents/#references","title":"References","text":"<ul> <li>\ud83d\ude80 LangGraph Quick Start &gt; Part 2: \ud83d\udee0\ufe0f Enhancing the Chatbot with Tools</li> </ul>"},{"location":"agents/#research-agent-with-human-in-the-loop","title":"Research Agent with Human-in-the-loop","text":"<p>Graph:</p> <p></p> <p>Screenshot:</p> <p></p> <p>YouTube: Research Agent using Azure</p>"},{"location":"agents/#references_1","title":"References","text":"<ul> <li>Research Agent with Human-in-the-loop</li> </ul>"},{"location":"agents/#documentation-agent","title":"Documentation Agent","text":"<p>Graph:</p> <p></p> <p>Screenshot:</p> <p></p>"},{"location":"agents/#tools-agent","title":"Tools Agent","text":"<p>Graph:</p> <p></p> <p>Screenshot:</p> <p></p>"},{"location":"agents/#summarize-agent","title":"Summarize Agent","text":"<p>Graph:</p> <p></p> <pre><code>$ poetry run python main.py agents-summarize-run \\\n    --png ./docs/images/summarize_agent.png\n</code></pre>"},{"location":"agents/#references_2","title":"References","text":"<ul> <li>How to summarize text through parallelization</li> </ul>"},{"location":"llms/","title":"LLMs","text":""},{"location":"llms/#ollama","title":"Ollama","text":"<pre><code># Start ollama\nollama serve\n\n# Call chat API\npoetry run python main.py llms-ollama-chat --verbose\n</code></pre>"},{"location":"llms/#references","title":"References","text":"<ul> <li>AzureChatOpenAI</li> <li>ChatOllama</li> <li>Embedding models</li> </ul>"},{"location":"references/","title":"References","text":""},{"location":"references/#open-webui","title":"Open WebUI","text":"<ul> <li>Azure OpenAI Service \u3092\u4f7f\u3063\u3066\u904a\u3076</li> <li>docker-compose.yaml</li> <li>LiteLLM OpenAI \u4e92\u63db\u30d7\u30ed\u30ad\u30b7\u3067\u7570\u306a\u308b LLM \u306b\u5bfe\u3057\u3066\u540c\u3058\u30b3\u30fc\u30c9\u3067 Function Calling\uff08OpenAI/Anthropic\uff09</li> <li>Open WebUI (Formerly Ollama WebUI) \u304c\u3059\u3054\u3044</li> </ul>"},{"location":"references/#dify","title":"Dify","text":"<ul> <li>Quick start</li> </ul> <pre><code>git clone https://github.com/langgenius/dify.git\n\ncd dify/docker\n\ncp .env.example .env\ndocker compose up -d\n\n# Reset the password of the admin account\n# ref. https://docs.dify.ai/getting-started/install-self-hosted/faqs#id-4.-how-to-reset-the-password-of-the-admin-account\ndocker exec -it docker-api-1 flask reset-password\n</code></pre>"},{"location":"references/#ollama","title":"Ollama","text":"<pre><code># Run the Ollama server locally\nexport OLLAMA_HOST=http://localhost:11434\nollama serve\n\n# Specify the base url for Ollama: `http://host.docker.internal:11434`\n# ref. https://qiita.com/Tadataka_Takahashi/items/ba832511bd4fd5cd46f1\n</code></pre>"},{"location":"scripts/","title":"Scripts","text":""},{"location":"scripts/#cosmosdbspy","title":"cosmosdbs.py","text":"<p>To use Microsoft Entra ID authentication, you need to create a role assignment for the user or service principal. Refer to the following documents for more information.</p> <ul> <li>Use data plane role-based access control with Azure Cosmos DB for NoSQL</li> <li>Use data plane role-based access control with Azure Cosmos DB for NoSQL</li> </ul> <p>To create a role assignment for the user or service principal, you can use the following Azure CLI commands.</p> <pre><code># Set variables\nRESOURCE_GROUP_NAME=\"YOUR_RESOURCE_GROUP_NAME\"\nCOSMOSDB_ACCOUNT_NAME=\"YOUR_COSMOSDB_ACCOUNT_NAME\"\n# Note: If you are creating a role assignment for a service principal, use the Object ID in the Enterprise applications section of the Microsoft Entra ID portal blade.\nPRINCIPAL_ID=\"00000000-0000-0000-0000-000000000000\"\n\n# Get the role definition ID\n# ROLE_NAME=\"Cosmos DB Built-in Data Reader\"\nROLE_NAME=\"Cosmos DB Built-in Data Contributor\"\nROLE_DEFINITION_ID=$(az cosmosdb sql role definition list \\\n    --resource-group $RESOURCE_GROUP_NAME \\\n    --account-name $COSMOSDB_ACCOUNT_NAME \\\n    --query \"[?roleName=='$ROLE_NAME'].id\" --output tsv)\n\n# Get the Cosmos DB account ID\nAZURE_COSMOSDB_ACCOUNT_ID=$(az cosmosdb show \\\n    --resource-group $RESOURCE_GROUP_NAME \\\n    --name $COSMOSDB_ACCOUNT_NAME \\\n    --query \"{id:id}\" --output tsv)\n\n# Assign the role to the user\naz cosmosdb sql role assignment create \\\n    --resource-group $RESOURCE_GROUP_NAME \\\n    --account-name $COSMOSDB_ACCOUNT_NAME \\\n    --role-definition-id $ROLE_DEFINITION_ID \\\n    --scope $AZURE_COSMOSDB_ACCOUNT_ID \\\n    --principal-id $PRINCIPAL_ID\n\n# List the role assignments\naz cosmosdb sql role assignment list \\\n    --resource-group $RESOURCE_GROUP_NAME \\\n    --account-name $COSMOSDB_ACCOUNT_NAME\n</code></pre> <p>Run the following commands to use the <code>cosmosdbs.py</code> script.</p> <pre><code># help\npoetry run python scripts/cosmosdbs.py --help\n\n# insert data to Cosmos DB\npoetry run python scripts/cosmosdbs.py insert-data \\\n    --pdf-url \"https://www.maff.go.jp/j/wpaper/w_maff/r5/pdf/zentaiban_20.pdf\" \\\n    --verbose --service-principal\n\n# query data from Cosmos DB\npoetry run python scripts/cosmosdbs.py query-data \\\n    --query \"\u8fb2\u6797\u2f54\u7523\u796d\u5929\u7687\u676f\u53d7\u8cde\u8005\" \\\n    --verbose --service-principal\n</code></pre>"},{"location":"scripts/#references","title":"References","text":"<ul> <li>Azure Cosmos DB No SQL</li> <li>Learn Azure Azure Cosmos DB Vector database</li> <li>AzureDataRetrievalAugmentedGenerationSamples/Python/CosmosDB-NoSQL_VectorSearch</li> <li>Azure Cosmos DB \u30d9\u30af\u30bf\u30fc\u691c\u7d22\u6a5f\u80fd\u3068 RAG \u306e\u5b9f\u88c5\u30ac\u30a4\u30c9</li> <li>Azure CosmosDB for NoSQL \u3067\u30d9\u30af\u30c8\u30eb\u691c\u7d22\u3057\u3088\u3046\uff01\uff01</li> <li>Use data plane role-based access control with Azure Cosmos DB for NoSQL</li> </ul>"},{"location":"scripts/#bing_searchespy","title":"bing_searches.py","text":"<pre><code># help\npoetry run python scripts/bing_searches.py --help\n\n# search data from Bing\npoetry run python scripts/bing_searches.py search \\\n    --query \"Who is the CEO of Microsoft?\"\n\n# search data from Bing\npoetry run python scripts/bing_searches.py chain \\\n    --query \"Who is the CEO of Microsoft?\"\n</code></pre>"},{"location":"scripts/#references_1","title":"References","text":"<ul> <li>Bing Search</li> </ul>"},{"location":"scripts/#langgraphspy","title":"langgraphs.py","text":"<pre><code># help\npoetry run python scripts/langgraphs.py --help\n\n# draw a graph in mermaid format\npoetry run python scripts/langgraphs.py draw-mermaid-png \\\n    --output docs/images/langgraphs_mermaid.png\n\n# run a workflow implemented by LangGraph\npoetry run python scripts/langgraphs.py run \\\n    --query \"How is the weather today in Japan?\"\npoetry run python scripts/langgraphs.py run \\\n    --query \"How is the weather today in San Francisco?\"\n</code></pre>"},{"location":"scripts/#references_2","title":"References","text":"<ul> <li>\ud83e\udd9c\ud83d\udd78\ufe0fLangGraph</li> <li>\ud83d\ude80 LangGraph Quick Start</li> </ul>"},{"location":"scripts/#langchainspy","title":"langchains.py","text":"<pre><code># help\npoetry run python scripts/langchains.py --help\n\n# via OpenAI SDK\n# call with API key\npoetry run python scripts/langchains.py openai --verbose\n# call with service principal\npoetry run python scripts/langchains.py openai --verbose --service-principal\n\n# via LangChain\n# call with API key\npoetry run python scripts/langchains.py langchain --verbose\n# call with service principal\npoetry run python scripts/langchains.py langchain --verbose --service-principal\n</code></pre>"},{"location":"scripts/#references_3","title":"References","text":"<ul> <li>How to switch between OpenAI and Azure OpenAI endpoints with Python &gt; Microsoft Entra ID authentication</li> </ul>"},{"location":"tasks/","title":"Tasks","text":""},{"location":"tasks/#scoringevaluator","title":"ScoringEvaluator","text":"<pre><code>$ poetry run python main.py tasks-scoring-evaluator \\\n    --query \"something wrong with my computer\"\n\n# score=1 reason='The bug report lacks essential details. It does not specify the model number of the hardware or the version of the software. There are no reproduction steps provided, nor is there any information on the scope or impact of the bug. The urgency of the issue is also not mentioned. Overall, the report is too vague to be actionable.'\n</code></pre>"},{"location":"tasks/#references","title":"References","text":"<ul> <li>Scoring Evaluator</li> <li>libs/langchain/langchain/evaluation/scoring</li> </ul>"},{"location":"tasks/#imagelabeler","title":"ImageLabeler","text":"<pre><code>$ poetry run python main.py tasks-image-labeler \\\n    --file ./docs/images/workshop-llm-agents.png\n\n# Labels: [&lt;Label.AZURE: 'Azure'&gt;, &lt;Label.LANGCHAIN: 'Langchain'&gt;]\n</code></pre>"},{"location":"tasks/#references_1","title":"References","text":""}]}